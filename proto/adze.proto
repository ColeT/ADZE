syntax = "proto3";
// ADZE core concept representations standard representation formats for
// peers and content scores.
// All timestamps are 64 bit ints, representing milliseconds since unix epoch.

// Everything roles up into this single object, the Manifest.  An ADZE manifest
// should contain all the data necessary to do local ranking of content.  All
// the content i adze to my list ends up in my manifest. I can publish my 
// manifest for anyone to consume it. 

// I can also adze other adze users' manifests. The ADZE client (browser plugin
// or otherwise) can download all of my peer's manifests, and show me content
// my peers like. We can add in recursion if we want as well: my client
// might decide to 'follow' peers lists several hops out.

// Once there's enough content on here, we can start experimenting with ranking
// options. People can rank the content however they want. Some might sort by 
// new, others might build ML models, etc.  Those custom rankings and sort
// orders can themselves be represented by public manifests, so people can
// experiment easily with all kinds of rankers. People can use ML locally to
// figure out which remote ranking options they like the best.

// Since all content that's adzed is adzed _by some person_, we can filter spam 
// just by removing those spammy peers from our own manifests.  And those spam
// user lists can ALSO be published as content on ADZE. Of course, we'll
// differ in our judgement there, but that's the whole point of ADZE. 

// When all content is tied to specific identiies, and we can filter out those
// identities whose values don't align with our values. That way, we can all 
// use the web in ways that align with our own personal values, without 
// trying to contorl or censor each other.  You'd have to censor the entire web
// to censor ADZE.

message Manifest {
  optional Meta meta = 1;
  optional ManifestContent content = 2;
}

// Maybe other stuff will eventually go here but for now, just these two
message ManifestContent { 
  repeated Peer peers = 1;
  repeated ContentScore scores = 2;
}


message Meta { 
  optional Peer owner = 1; // who creates this manifest?  optional
  int64 timestamp = 2;
  // todo: add a signature showing that yes this person created this for now
  // you'd manage this just by only adding the manifest urls of people you trust
}

message Peer { 
  optional string handle = 1; // nothing enforces global uniqueness here
  // but with enough ADZE users it would be possible for your machine to resolve
  // a name i.e. 'what's the url that most of my peers think this name is
  // called'

  // We can represent the remote peer's manifests as pieces of content with
  // scores this way a person can put up multiple manifests of varying quality
  // and adze users can rank different indices by the same peer as being of
  // different quality
  repeated ContentScore peer_manifests = 2;
}

// A single score given to a single piece of content, at a single time
message ContentScore { 
  optional string url = 1;
  optional float score = 2;
  optional int64 timestamp = 3;
  // eventually we can add other bits of metadata here i.e. peers can tag
  // content as 'kid safe', 'in the english langugae', etc
}
